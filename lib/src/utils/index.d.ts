import BigNumber from 'bignumber.js';
import type { IAbiItem } from '../lib/contract/index';
import type { IEvent, IEventResponse } from '../lib/event';
import * as abi from './abi';
import * as accounts from './accounts';
import * as base58 from './base58';
import * as bytes from './bytes';
import * as code from './code';
import * as crypto from './crypto';
import * as ethersUtils from './ethersUtils';
import * as message from './message';
import { TypedDataEncoder as _TypedDataEncoder } from './typedData';
declare const _default: {
    code: typeof code;
    accounts: typeof accounts;
    base58: typeof base58;
    bytes: typeof bytes;
    crypto: typeof crypto;
    abi: typeof abi;
    message: typeof message;
    _TypedDataEncoder: typeof _TypedDataEncoder;
    ethersUtils: typeof ethersUtils;
    isValidURL(url: any): url is string;
    isObject<T extends object>(obj: unknown): obj is T;
    isArray(array: any): array is unknown[];
    isJson(string: any): boolean;
    isBoolean(bool: any): bool is boolean;
    isBigNumber(number: any): number is BigNumber;
    isString(string: any): string is string;
    isFunction(obj: any): obj is Function;
    isHex(string: any): string is string;
    isInteger(number: any): number is number;
    hasProperty(obj: any, property: string): boolean;
    hasProperties(obj: any, ...properties: string[]): boolean;
    mapEvent(event: IEventResponse): IEvent;
    parseEvent(event: IEvent, { inputs: abi }: {
        inputs: IAbiItem[];
    }): IEvent;
    padLeft(input: any, padding: string, amount: number): string;
    isNotNullOrUndefined<T_1>(val: T_1): val is Exclude<Exclude<T_1, null>, undefined>;
    sleep(millis?: number): Promise<never>;
};
export default _default;
//# sourceMappingURL=index.d.ts.map